// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// s_int2base
std::string s_int2base(long long int num, int base);
RcppExport SEXP _HVcpp_s_int2base(SEXP numSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long int >::type num(numSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(s_int2base(num, base));
    return rcpp_result_gen;
END_RCPP
}
// cpp_int2base
CharacterVector cpp_int2base(const std::vector<long long int> num, int base);
RcppExport SEXP _HVcpp_cpp_int2base(SEXP numSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type num(numSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_int2base(num, base));
    return rcpp_result_gen;
END_RCPP
}
// s_base2int
long long int s_base2int(std::string s, int base);
RcppExport SEXP _HVcpp_s_base2int(SEXP sSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(s_base2int(s, base));
    return rcpp_result_gen;
END_RCPP
}
// cpp_base2int
NumericVector cpp_base2int(const std::vector<std::string> str, int base);
RcppExport SEXP _HVcpp_cpp_base2int(SEXP strSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< int >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_base2int(str, base));
    return rcpp_result_gen;
END_RCPP
}
// s_base2base
std::string s_base2base(std::string s, int from, int to);
RcppExport SEXP _HVcpp_s_base2base(SEXP sSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(s_base2base(s, from, to));
    return rcpp_result_gen;
END_RCPP
}
// cpp_base2base
CharacterVector cpp_base2base(const std::vector<std::string> str, int from, int to);
RcppExport SEXP _HVcpp_cpp_base2base(SEXP strSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_base2base(str, from, to));
    return rcpp_result_gen;
END_RCPP
}
// s_base64_enc
std::string s_base64_enc(const std::string str);
RcppExport SEXP _HVcpp_s_base64_enc(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(s_base64_enc(str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_base64_enc
CharacterVector cpp_base64_enc(const std::vector<std::string> str);
RcppExport SEXP _HVcpp_cpp_base64_enc(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_base64_enc(str));
    return rcpp_result_gen;
END_RCPP
}
// s_base64_dec
std::string s_base64_dec(const std::string str64);
RcppExport SEXP _HVcpp_s_base64_dec(SEXP str64SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type str64(str64SEXP);
    rcpp_result_gen = Rcpp::wrap(s_base64_dec(str64));
    return rcpp_result_gen;
END_RCPP
}
// cpp_base64_dec
CharacterVector cpp_base64_dec(const std::vector<std::string> str64);
RcppExport SEXP _HVcpp_cpp_base64_dec(SEXP str64SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str64(str64SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_base64_dec(str64));
    return rcpp_result_gen;
END_RCPP
}
// say_hello
RawVector say_hello(std::string msg);
RcppExport SEXP _HVcpp_say_hello(SEXP msgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type msg(msgSEXP);
    rcpp_result_gen = Rcpp::wrap(say_hello(msg));
    return rcpp_result_gen;
END_RCPP
}
// print_hello
std::string print_hello(RawVector raw);
RcppExport SEXP _HVcpp_print_hello(SEXP rawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawVector >::type raw(rawSEXP);
    rcpp_result_gen = Rcpp::wrap(print_hello(raw));
    return rcpp_result_gen;
END_RCPP
}
// s_SHIFT_R
long long s_SHIFT_R(long long a, int b);
RcppExport SEXP _HVcpp_s_SHIFT_R(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s_SHIFT_R(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_SHIFT_R
NumericVector cpp_SHIFT_R(const std::vector<long long int> arr, int b);
RcppExport SEXP _HVcpp_cpp_SHIFT_R(SEXP arrSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_SHIFT_R(arr, b));
    return rcpp_result_gen;
END_RCPP
}
// s_SHIFT_L
long long s_SHIFT_L(long long a, int b);
RcppExport SEXP _HVcpp_s_SHIFT_L(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s_SHIFT_L(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_SHIFT_L
NumericVector cpp_SHIFT_L(const std::vector<long long int> arr, int b);
RcppExport SEXP _HVcpp_cpp_SHIFT_L(SEXP arrSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_SHIFT_L(arr, b));
    return rcpp_result_gen;
END_RCPP
}
// s_AND
long long s_AND(long long a, long long int b);
RcppExport SEXP _HVcpp_s_AND(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    Rcpp::traits::input_parameter< long long int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s_AND(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_AND
NumericVector cpp_AND(const std::vector<long long int> arr, const std::vector<long long int> brr);
RcppExport SEXP _HVcpp_cpp_AND(SEXP arrSEXP, SEXP brrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type brr(brrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_AND(arr, brr));
    return rcpp_result_gen;
END_RCPP
}
// s_OR
long long s_OR(long long a, long long int b);
RcppExport SEXP _HVcpp_s_OR(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    Rcpp::traits::input_parameter< long long int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s_OR(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_OR
NumericVector cpp_OR(const std::vector<long long int> arr, const std::vector<long long int> brr);
RcppExport SEXP _HVcpp_cpp_OR(SEXP arrSEXP, SEXP brrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type brr(brrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_OR(arr, brr));
    return rcpp_result_gen;
END_RCPP
}
// s_XOR
long long s_XOR(long long a, long long int b);
RcppExport SEXP _HVcpp_s_XOR(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    Rcpp::traits::input_parameter< long long int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(s_XOR(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_XOR
NumericVector cpp_XOR(const std::vector<long long int> arr, const std::vector<long long int> brr);
RcppExport SEXP _HVcpp_cpp_XOR(SEXP arrSEXP, SEXP brrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type brr(brrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_XOR(arr, brr));
    return rcpp_result_gen;
END_RCPP
}
// s_NOT
long long s_NOT(long long a);
RcppExport SEXP _HVcpp_s_NOT(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(s_NOT(a));
    return rcpp_result_gen;
END_RCPP
}
// cpp_NOT
NumericVector cpp_NOT(const std::vector<long long int> arr);
RcppExport SEXP _HVcpp_cpp_NOT(SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<long long int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_NOT(arr));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gcd_lcm
List cpp_gcd_lcm(long long int x, long long int y);
RcppExport SEXP _HVcpp_cpp_gcd_lcm(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long int >::type x(xSEXP);
    Rcpp::traits::input_parameter< long long int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gcd_lcm(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gcd
long long int cpp_gcd(long long int x, long long int y);
RcppExport SEXP _HVcpp_cpp_gcd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long int >::type x(xSEXP);
    Rcpp::traits::input_parameter< long long int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gcd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lcm
long long int cpp_lcm(long long int x, long long int y);
RcppExport SEXP _HVcpp_cpp_lcm(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long int >::type x(xSEXP);
    Rcpp::traits::input_parameter< long long int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lcm(x, y));
    return rcpp_result_gen;
END_RCPP
}
// s_md5
std::string s_md5(const std::string str);
RcppExport SEXP _HVcpp_s_md5(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(s_md5(str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_md5
CharacterVector cpp_md5(const std::vector<std::string> str, int times);
RcppExport SEXP _HVcpp_cpp_md5(SEXP strSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_md5(str, times));
    return rcpp_result_gen;
END_RCPP
}
// cpp_nano
uint64_t cpp_nano();
RcppExport SEXP _HVcpp_cpp_nano() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_nano());
    return rcpp_result_gen;
END_RCPP
}
// cpp_micro
uint64_t cpp_micro();
RcppExport SEXP _HVcpp_cpp_micro() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_micro());
    return rcpp_result_gen;
END_RCPP
}
// cpp_milli
uint64_t cpp_milli();
RcppExport SEXP _HVcpp_cpp_milli() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_milli());
    return rcpp_result_gen;
END_RCPP
}
// cpp_now
uint64_t cpp_now(std::string precision);
RcppExport SEXP _HVcpp_cpp_now(SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_now(precision));
    return rcpp_result_gen;
END_RCPP
}
// cpp_time
double cpp_time();
RcppExport SEXP _HVcpp_cpp_time() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_time());
    return rcpp_result_gen;
END_RCPP
}
// cpp_primes
NumericVector cpp_primes(long long int n, bool first);
RcppExport SEXP _HVcpp_cpp_primes(SEXP nSEXP, SEXP firstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long long int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type first(firstSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_primes(n, first));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sort_numeric_works
NumericVector cpp_sort_numeric_works(NumericVector arr, std::string dir);
RcppExport SEXP _HVcpp_cpp_sort_numeric_works(SEXP arrSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sort_numeric_works(arr, dir));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sort_numeric
NumericVector cpp_sort_numeric(NumericVector arr, NumericVector partial, std::string dir);
RcppExport SEXP _HVcpp_cpp_sort_numeric(SEXP arrSEXP, SEXP partialSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type partial(partialSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sort_numeric(arr, partial, dir));
    return rcpp_result_gen;
END_RCPP
}
// s_str_reverse
std::string s_str_reverse(std::string s);
RcppExport SEXP _HVcpp_s_str_reverse(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s_str_reverse(s));
    return rcpp_result_gen;
END_RCPP
}
// cpp_str_reverse
CharacterVector cpp_str_reverse(const std::vector<std::string> str);
RcppExport SEXP _HVcpp_cpp_str_reverse(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_str_reverse(str));
    return rcpp_result_gen;
END_RCPP
}
// s_str_repeat
std::string s_str_repeat(std::string s, int times);
RcppExport SEXP _HVcpp_s_str_repeat(SEXP sSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(s_str_repeat(s, times));
    return rcpp_result_gen;
END_RCPP
}
// cpp_str_repeat
CharacterVector cpp_str_repeat(const std::vector<std::string> str, int times);
RcppExport SEXP _HVcpp_cpp_str_repeat(SEXP strSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_str_repeat(str, times));
    return rcpp_result_gen;
END_RCPP
}
// s_rtrim
std::string s_rtrim(std::string s, std::string t);
RcppExport SEXP _HVcpp_s_rtrim(SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(s_rtrim(s, t));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rtrim
CharacterVector cpp_rtrim(const std::vector<std::string> str, std::string t);
RcppExport SEXP _HVcpp_cpp_rtrim(SEXP strSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rtrim(str, t));
    return rcpp_result_gen;
END_RCPP
}
// s_ltrim
std::string s_ltrim(std::string s, std::string t);
RcppExport SEXP _HVcpp_s_ltrim(SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(s_ltrim(s, t));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ltrim
CharacterVector cpp_ltrim(const std::vector<std::string> str, std::string t);
RcppExport SEXP _HVcpp_cpp_ltrim(SEXP strSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ltrim(str, t));
    return rcpp_result_gen;
END_RCPP
}
// s_btrim
std::string s_btrim(std::string s, std::string t);
RcppExport SEXP _HVcpp_s_btrim(SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(s_btrim(s, t));
    return rcpp_result_gen;
END_RCPP
}
// cpp_btrim
CharacterVector cpp_btrim(const std::vector<std::string> str, std::string t);
RcppExport SEXP _HVcpp_cpp_btrim(SEXP strSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_btrim(str, t));
    return rcpp_result_gen;
END_RCPP
}
// s_trim
std::string s_trim(std::string s, std::string side, std::string t);
RcppExport SEXP _HVcpp_s_trim(SEXP sSEXP, SEXP sideSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(s_trim(s, side, t));
    return rcpp_result_gen;
END_RCPP
}
// cpp_trim
CharacterVector cpp_trim(const std::vector<std::string> str, std::string side, std::string t);
RcppExport SEXP _HVcpp_cpp_trim(SEXP strSEXP, SEXP sideSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type side(sideSEXP);
    Rcpp::traits::input_parameter< std::string >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_trim(str, side, t));
    return rcpp_result_gen;
END_RCPP
}
// s_tolower
std::string s_tolower(std::string s, std::string locale);
RcppExport SEXP _HVcpp_s_tolower(SEXP sSEXP, SEXP localeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type locale(localeSEXP);
    rcpp_result_gen = Rcpp::wrap(s_tolower(s, locale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_strtolower
CharacterVector cpp_strtolower(const std::vector<std::string> str, std::string locale);
RcppExport SEXP _HVcpp_cpp_strtolower(SEXP strSEXP, SEXP localeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type locale(localeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_strtolower(str, locale));
    return rcpp_result_gen;
END_RCPP
}
// s_toupper
std::string s_toupper(std::string s, std::string locale);
RcppExport SEXP _HVcpp_s_toupper(SEXP sSEXP, SEXP localeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type locale(localeSEXP);
    rcpp_result_gen = Rcpp::wrap(s_toupper(s, locale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_strtoupper
CharacterVector cpp_strtoupper(const std::vector<std::string> str, std::string locale);
RcppExport SEXP _HVcpp_cpp_strtoupper(SEXP strSEXP, SEXP localeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type locale(localeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_strtoupper(str, locale));
    return rcpp_result_gen;
END_RCPP
}
// s_strlen
long long unsigned int s_strlen(std::string s);
RcppExport SEXP _HVcpp_s_strlen(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s_strlen(s));
    return rcpp_result_gen;
END_RCPP
}
// cpp_strlen
NumericVector cpp_strlen(const std::vector<std::string> str);
RcppExport SEXP _HVcpp_cpp_strlen(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_strlen(str));
    return rcpp_result_gen;
END_RCPP
}
// s_explode
std::vector<std::string> s_explode(std::string sep, std::string s);
RcppExport SEXP _HVcpp_s_explode(SEXP sepSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(s_explode(sep, s));
    return rcpp_result_gen;
END_RCPP
}
// cpp_explode
List cpp_explode(std::string sep, const std::vector<std::string> str);
RcppExport SEXP _HVcpp_cpp_explode(SEXP sepSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_explode(sep, str));
    return rcpp_result_gen;
END_RCPP
}
// s_implode
std::string s_implode(std::string sep, std::vector<std::string> r);
RcppExport SEXP _HVcpp_s_implode(SEXP sepSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(s_implode(sep, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_implode
CharacterVector cpp_implode(std::string sep, Rcpp::List str);
RcppExport SEXP _HVcpp_cpp_implode(SEXP sepSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_implode(sep, str));
    return rcpp_result_gen;
END_RCPP
}
// s_str_replace
std::string s_str_replace(const std::string search, const std::string replace, const std::string subject);
RcppExport SEXP _HVcpp_s_str_replace(SEXP searchSEXP, SEXP replaceSEXP, SEXP subjectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type search(searchSEXP);
    Rcpp::traits::input_parameter< const std::string >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const std::string >::type subject(subjectSEXP);
    rcpp_result_gen = Rcpp::wrap(s_str_replace(search, replace, subject));
    return rcpp_result_gen;
END_RCPP
}
// cpp_str_replace
CharacterVector cpp_str_replace(const std::vector<std::string> search, const std::vector<std::string> replace, const std::vector<std::string> subject);
RcppExport SEXP _HVcpp_cpp_str_replace(SEXP searchSEXP, SEXP replaceSEXP, SEXP subjectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type search(searchSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type subject(subjectSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_str_replace(search, replace, subject));
    return rcpp_result_gen;
END_RCPP
}
// s_uuid_basic
std::string s_uuid_basic();
RcppExport SEXP _HVcpp_s_uuid_basic() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(s_uuid_basic());
    return rcpp_result_gen;
END_RCPP
}
// cpp_uuid_basic
CharacterVector cpp_uuid_basic(int n);
RcppExport SEXP _HVcpp_cpp_uuid_basic(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_uuid_basic(n));
    return rcpp_result_gen;
END_RCPP
}
// s_uuid_basic_v4
std::string s_uuid_basic_v4();
RcppExport SEXP _HVcpp_s_uuid_basic_v4() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(s_uuid_basic_v4());
    return rcpp_result_gen;
END_RCPP
}
// cpp_uuid_basic_v4
CharacterVector cpp_uuid_basic_v4(int n);
RcppExport SEXP _HVcpp_cpp_uuid_basic_v4(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_uuid_basic_v4(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HVcpp_s_int2base", (DL_FUNC) &_HVcpp_s_int2base, 2},
    {"_HVcpp_cpp_int2base", (DL_FUNC) &_HVcpp_cpp_int2base, 2},
    {"_HVcpp_s_base2int", (DL_FUNC) &_HVcpp_s_base2int, 2},
    {"_HVcpp_cpp_base2int", (DL_FUNC) &_HVcpp_cpp_base2int, 2},
    {"_HVcpp_s_base2base", (DL_FUNC) &_HVcpp_s_base2base, 3},
    {"_HVcpp_cpp_base2base", (DL_FUNC) &_HVcpp_cpp_base2base, 3},
    {"_HVcpp_s_base64_enc", (DL_FUNC) &_HVcpp_s_base64_enc, 1},
    {"_HVcpp_cpp_base64_enc", (DL_FUNC) &_HVcpp_cpp_base64_enc, 1},
    {"_HVcpp_s_base64_dec", (DL_FUNC) &_HVcpp_s_base64_dec, 1},
    {"_HVcpp_cpp_base64_dec", (DL_FUNC) &_HVcpp_cpp_base64_dec, 1},
    {"_HVcpp_say_hello", (DL_FUNC) &_HVcpp_say_hello, 1},
    {"_HVcpp_print_hello", (DL_FUNC) &_HVcpp_print_hello, 1},
    {"_HVcpp_s_SHIFT_R", (DL_FUNC) &_HVcpp_s_SHIFT_R, 2},
    {"_HVcpp_cpp_SHIFT_R", (DL_FUNC) &_HVcpp_cpp_SHIFT_R, 2},
    {"_HVcpp_s_SHIFT_L", (DL_FUNC) &_HVcpp_s_SHIFT_L, 2},
    {"_HVcpp_cpp_SHIFT_L", (DL_FUNC) &_HVcpp_cpp_SHIFT_L, 2},
    {"_HVcpp_s_AND", (DL_FUNC) &_HVcpp_s_AND, 2},
    {"_HVcpp_cpp_AND", (DL_FUNC) &_HVcpp_cpp_AND, 2},
    {"_HVcpp_s_OR", (DL_FUNC) &_HVcpp_s_OR, 2},
    {"_HVcpp_cpp_OR", (DL_FUNC) &_HVcpp_cpp_OR, 2},
    {"_HVcpp_s_XOR", (DL_FUNC) &_HVcpp_s_XOR, 2},
    {"_HVcpp_cpp_XOR", (DL_FUNC) &_HVcpp_cpp_XOR, 2},
    {"_HVcpp_s_NOT", (DL_FUNC) &_HVcpp_s_NOT, 1},
    {"_HVcpp_cpp_NOT", (DL_FUNC) &_HVcpp_cpp_NOT, 1},
    {"_HVcpp_cpp_gcd_lcm", (DL_FUNC) &_HVcpp_cpp_gcd_lcm, 2},
    {"_HVcpp_cpp_gcd", (DL_FUNC) &_HVcpp_cpp_gcd, 2},
    {"_HVcpp_cpp_lcm", (DL_FUNC) &_HVcpp_cpp_lcm, 2},
    {"_HVcpp_s_md5", (DL_FUNC) &_HVcpp_s_md5, 1},
    {"_HVcpp_cpp_md5", (DL_FUNC) &_HVcpp_cpp_md5, 2},
    {"_HVcpp_cpp_nano", (DL_FUNC) &_HVcpp_cpp_nano, 0},
    {"_HVcpp_cpp_micro", (DL_FUNC) &_HVcpp_cpp_micro, 0},
    {"_HVcpp_cpp_milli", (DL_FUNC) &_HVcpp_cpp_milli, 0},
    {"_HVcpp_cpp_now", (DL_FUNC) &_HVcpp_cpp_now, 1},
    {"_HVcpp_cpp_time", (DL_FUNC) &_HVcpp_cpp_time, 0},
    {"_HVcpp_cpp_primes", (DL_FUNC) &_HVcpp_cpp_primes, 2},
    {"_HVcpp_cpp_sort_numeric_works", (DL_FUNC) &_HVcpp_cpp_sort_numeric_works, 2},
    {"_HVcpp_cpp_sort_numeric", (DL_FUNC) &_HVcpp_cpp_sort_numeric, 3},
    {"_HVcpp_s_str_reverse", (DL_FUNC) &_HVcpp_s_str_reverse, 1},
    {"_HVcpp_cpp_str_reverse", (DL_FUNC) &_HVcpp_cpp_str_reverse, 1},
    {"_HVcpp_s_str_repeat", (DL_FUNC) &_HVcpp_s_str_repeat, 2},
    {"_HVcpp_cpp_str_repeat", (DL_FUNC) &_HVcpp_cpp_str_repeat, 2},
    {"_HVcpp_s_rtrim", (DL_FUNC) &_HVcpp_s_rtrim, 2},
    {"_HVcpp_cpp_rtrim", (DL_FUNC) &_HVcpp_cpp_rtrim, 2},
    {"_HVcpp_s_ltrim", (DL_FUNC) &_HVcpp_s_ltrim, 2},
    {"_HVcpp_cpp_ltrim", (DL_FUNC) &_HVcpp_cpp_ltrim, 2},
    {"_HVcpp_s_btrim", (DL_FUNC) &_HVcpp_s_btrim, 2},
    {"_HVcpp_cpp_btrim", (DL_FUNC) &_HVcpp_cpp_btrim, 2},
    {"_HVcpp_s_trim", (DL_FUNC) &_HVcpp_s_trim, 3},
    {"_HVcpp_cpp_trim", (DL_FUNC) &_HVcpp_cpp_trim, 3},
    {"_HVcpp_s_tolower", (DL_FUNC) &_HVcpp_s_tolower, 2},
    {"_HVcpp_cpp_strtolower", (DL_FUNC) &_HVcpp_cpp_strtolower, 2},
    {"_HVcpp_s_toupper", (DL_FUNC) &_HVcpp_s_toupper, 2},
    {"_HVcpp_cpp_strtoupper", (DL_FUNC) &_HVcpp_cpp_strtoupper, 2},
    {"_HVcpp_s_strlen", (DL_FUNC) &_HVcpp_s_strlen, 1},
    {"_HVcpp_cpp_strlen", (DL_FUNC) &_HVcpp_cpp_strlen, 1},
    {"_HVcpp_s_explode", (DL_FUNC) &_HVcpp_s_explode, 2},
    {"_HVcpp_cpp_explode", (DL_FUNC) &_HVcpp_cpp_explode, 2},
    {"_HVcpp_s_implode", (DL_FUNC) &_HVcpp_s_implode, 2},
    {"_HVcpp_cpp_implode", (DL_FUNC) &_HVcpp_cpp_implode, 2},
    {"_HVcpp_s_str_replace", (DL_FUNC) &_HVcpp_s_str_replace, 3},
    {"_HVcpp_cpp_str_replace", (DL_FUNC) &_HVcpp_cpp_str_replace, 3},
    {"_HVcpp_s_uuid_basic", (DL_FUNC) &_HVcpp_s_uuid_basic, 0},
    {"_HVcpp_cpp_uuid_basic", (DL_FUNC) &_HVcpp_cpp_uuid_basic, 1},
    {"_HVcpp_s_uuid_basic_v4", (DL_FUNC) &_HVcpp_s_uuid_basic_v4, 0},
    {"_HVcpp_cpp_uuid_basic_v4", (DL_FUNC) &_HVcpp_cpp_uuid_basic_v4, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_HVcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
